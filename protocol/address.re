open Mirage_crypto_pk;

type key = Rsa.priv;

let key_to_yojson = t =>
  `String(Rsa.sexp_of_priv(t) |> Sexplib.Sexp.to_string);
let key_of_yojson =
  fun
  | `String(sexp) =>
    try(Ok(Sexplib.Sexp.of_string(sexp) |> Rsa.priv_of_sexp)) {
    | _ => Error("failed to parse")
    }
  | _ => Error("invalid type");

type t = Rsa.pub_; // TODO: is okay to have this public
let compare = compare;
let to_yojson = t => `String(Rsa.sexp_of_pub(t) |> Sexplib.Sexp.to_string);
let of_yojson =
  fun
  | `String(sexp) =>
    try(Ok(Sexplib.Sexp.of_string(sexp) |> Rsa.pub_of_sexp)) {
    | _ => Error("failed to parse")
    }
  | _ => Error("invalid type");

let of_key = Rsa.pub_of_priv;

let genesis_key = {|
  (
    (e 65537)
    (d 9393161324378010832978526960160889093051019680028258220613469187318508846120328859229484796562867369250468089290045938329807637225832418470987686994452362112119206987641280339365063331602576936765996512759146982332044868186808840567646355627129555039757462111990398670533727653235474093272587662520268362559562741696364486884914351673012486445252015223035705814201951458217380900947410182958836123441220322238125130915903649072101106609333276381818653993383619448551477823616478694035757096558125369698574897725799494757915386050342810447148417662707217396818264493140951279776177046908555300293455899214963336293413)
    (n 25644641271225232075022442049075783732192654729015286773769836706073447792051155694535419500618231150950548934297093966270385466397391343858909395649049133753049634174090672343302151866829330752128019723253331213542812935903307268664104945167056431936704219722287638311633780846077619897971488341536797653700220093668788122240017823009103095797428379470453047903904262731136266764661978886126983147278388902037963742305168859295187067304312348374478714554560962286194374844210379302968484183435035861735575990257361685060490826529407098787005524337261993429862034386310552789872130548885792068400831848797344363445289)
    (p 175344606942769674024195855916278364259880075618377915339521651561114765455619606177814609106167914031598831984721253189654915855195868670579274991518182241305553683972073194186018066652527364647853819834199122407687549644497541817495306889291902720432683689945626130037408976363214705529239554163368664623567)
    (q 146252808788098786504692948053748315797896534093530561555647444199501422018672499671174660981333412146335470418944692161008501215587009417073814619723377095515015614462294270789489118776682112837128416111322467341430618872773886556064441636229082313875149484659926700547434960431513471376811237902001019768967)
    (dp 73461355765867020762048089108339640927774039645601758113390084790477564049543731431470096620657833217352169458542372229860308293576345668677161808476352744244115347068392109690182615256701464075806373974817359719667928812563422275706374128496693058805258038586402439117401441384329251716073827588440322635599)
    (dq 50371826601232369638279585935718860860126654676887435119612953148162810287402164618120366322392812899081194413787930351683535856664631834874805737162153711643269183051450421597881324885595444572678984519657151423329904164002810127767315815691332315925200637315468597658676807404368861496824439048536964130569)
    (q' 28993287947061081607532560780302089795796890667265742544426403506224863711638205147886747115830660631015355300421713028122523462458989675704969379020761454100047453468383899504878113717244307828569957058416198792592155691940582973842898672742998386282240178697105146801498680901169967658028100732734751201798)
  )
|};
let genesis_key =
  Sexplib.Sexp.of_string_conv_exn(genesis_key, Rsa.priv_of_sexp);
let genesis_address = Rsa.pub_of_priv(genesis_key);
